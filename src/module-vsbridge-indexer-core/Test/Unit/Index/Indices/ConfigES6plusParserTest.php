<?php

namespace Divante\VsbridgeIndexerCore\Test\Unit\Index\Indices;

use Divante\VsbridgeIndexerCore\Api\MappingInterface;
use Divante\VsbridgeIndexerCore\Index\Indices\ConfigES6plusParser;
use Divante\VsbridgeIndexerCore\Index\MappingFactory;
use Divante\VsbridgeIndexerCore\Index\Indices\Config\Data;
use Divante\VsbridgeIndexerCore\Api\Index\TypeInterfaceFactory as TypeFactoryInterface;
use Divante\VsbridgeIndexerCore\Index\Type;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

class ConfigES6plusParserTest extends TestCase
{
    /** @var MockObject|Data */
    private $configDataMock;

    /** @var MockObject|MappingFactory */
    private $mappingProviderFactoryMock;

    /** @var MockObject|TypeFactoryInterface */
    private $typeFactoryMock;

    /** @var ConfigES6plusParser */
    private $esConfigParser;

    /**
     * @var array
     */
    private $mockupXmlParseData = [
        'taxrule' => ['mapping' => null],
        'cms' => ['mapping' => null],
    ];

    protected function setUp()
    {
        $this->mappingProviderFactoryMock = $this->getMockBuilder(MappingFactory::class)
            ->disableOriginalConstructor()
            ->getMock();
        $this->configDataMock = $this->getMockBuilder(Data::class)
            ->disableOriginalConstructor()
            ->getMock();

        $this->typeFactoryMock = $this->getMockBuilder(TypeFactoryInterface::class)
            ->disableOriginalConstructor()
            ->setMethods(['create'])
            ->getMock();

        $this->esConfigParser = new ConfigES6plusParser(
            $this->typeFactoryMock,
            $this->mappingProviderFactoryMock
        );

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * Test parsing config for ES5
     */
    public function testGetConfigForEs5()
    {
        $mappingMock = $this->getMockBuilder(MappingInterface::class)
            ->getMock();
        $this->mappingProviderFactoryMock
            ->method('get')
            ->willReturn($mappingMock);

        $returnMapValue = [];
        foreach (array_keys($this->mockupXmlParseData) as $entity) {
            $returnMapValue[] = [
                [
                    'name' => $entity,
                    'mapping' => $mappingMock,
                ],
                $this->createType($entity, $mappingMock)
            ];
        }

        $this->typeFactoryMock
            ->method('create')
            ->will($this->returnValueMap($returnMapValue));

        $expectedConfig = [
            'taxrule' => ['types' => ['taxrule' => $this->createType('taxrule', $mappingMock)]],
            'cms' => ['types' => ['cms' => $this->createType('cms', $mappingMock)]]
        ];

        $es5config = $this->esConfigParser->parse($this->mockupXmlParseData);
        $this->assertEquals($expectedConfig, $es5config);
    }

    /**
     * @param string $typeName
     * @param $mapping
     * @return Type
     */
    private function createType(string $typeName, $mapping): Type
    {
        return new Type($typeName, $mapping);
    }
}
